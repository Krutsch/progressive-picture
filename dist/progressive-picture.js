const css=document.createElement("style");css.type="text/css",css.innerText="picture { display: inline-block; } picture > img { filter: blur(0px); transition: all 0.7s ease-in; } picture > img[data-src] { filter: blur(2px); }",document.head.appendChild(css);const progessiveLoaded=new WeakSet(),observer=new IntersectionObserver(d=>{for(const a of d)if(a.intersectionRatio>0&&!progessiveLoaded.has(a.target)){const b=a.target.querySelectorAll("source"),f=a.target.querySelector("img");if(!f)break;preload(b,"srcset",f,!1).then(h=>{if(h){progessiveLoaded.add(a.target);return}preload([f],"src",f,!0).then(c=>c&&progessiveLoaded.add(a.target))})}},{rootMargin:"0px",threshold:.5}),DOMObserver=new MutationObserver(d=>{for(const a of d){for(const b of a.addedNodes)b instanceof HTMLPictureElement&&observer.observe(b);for(const b of a.removedNodes)b instanceof HTMLPictureElement&&(observer.unobserve(b),progessiveLoaded.delete(b))}}).observe(document.body,{childList:!0,subtree:!0}),pictures=document.querySelectorAll("picture");for(const d of pictures)observer.observe(d);async function preload(d,a,b,f){var h;for(const c of d){const g=new Image();b.currentSrc||await{then:e=>b.onload=()=>e(b)};const i=b.currentSrc.split("/").slice(-1)[0],j=(h=c.getAttribute(a))==null?void 0:h.split("/").slice(-1)[0];if(c.dataset.src&&i===j)return c.dataset.src.includes(", ")?c.setAttribute(a,c.dataset.src):(g.src=c.dataset.src,await{then:e=>g.onload=()=>e(g)},c.setAttribute(a,g.src)),b.removeAttribute("data-src"),d.forEach(e=>{e.setAttribute(a,e.dataset.src),e.removeAttribute("data-src")}),f&&c.dataset.alt&&(c.setAttribute("alt",c.dataset.alt),c.removeAttribute("data-alt")),!0}}

const css=document.createElement("style");css.type="text/css",css.innerText="picture { display: inline-block; } picture > img { filter: blur(0px); transition: all 0.7s ease-in; } picture > img[data-src] { filter: blur(2px); }",document.head.appendChild(css);const progessiveLoaded=new WeakSet(),observer=new IntersectionObserver(d=>{for(const b of d)if(b.intersectionRatio>0&&!progessiveLoaded.has(b.target)){const a=b.target.querySelectorAll("source"),e=b.target.querySelector("img");if(!e)break;preload(a,"srcset",e,!1).then(c=>{if(c){progessiveLoaded.add(b.target);return}preload([e],"src",e,!0).then(f=>f&&progessiveLoaded.add(b.target))})}},{rootMargin:"0px",threshold:.5}),DOMObserver=new MutationObserver(d=>{for(const b of d){for(const a of b.addedNodes)a instanceof HTMLPictureElement&&observer.observe(a);for(const a of b.removedNodes)a instanceof HTMLPictureElement&&(observer.unobserve(a),progessiveLoaded.delete(a))}}).observe(document.body,{childList:!0,subtree:!0}),pictures=document.querySelectorAll("picture");for(const d of pictures)observer.observe(d);async function preload(d,b,a,e){for(const c of d){const f=new Image();a.currentSrc||await{then:g=>a.onload=()=>g(a)};const h=a.currentSrc.split("/").slice(-1)[0],i=c.getAttribute(b)?.split("/").slice(-1)[0];if(c.dataset.src&&h===i)return f.src=c.dataset.src,a.removeAttribute("data-src"),d.forEach(g=>g.removeAttribute("data-src")),await{then:g=>f.onload=()=>g(f)},c.setAttribute(b,f.src),e&&c.dataset.alt&&(c.setAttribute("alt",c.dataset.alt),c.removeAttribute("data-alt")),!0}}

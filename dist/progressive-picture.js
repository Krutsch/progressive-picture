const css=document.createElement("style");css.type="text/css",css.innerText="picture { display: block; } picture > img { display: block; max-width: 100%; height: auto; filter: blur(0px); transition: filter 0.7s ease-in; } picture > img[data-src] { filter: blur(3px); } picture > img.img-progressive { width: auto; }",document.head.appendChild(css);const progessiveLoaded=new WeakSet(),observer=new IntersectionObserver(d=>{for(const b of d)if(b.intersectionRatio>0&&!progessiveLoaded.has(b.target)){const a=b.target.querySelectorAll("source"),f=b.target.querySelector("img");if(!f)break;preload(a,"srcset",f,!1).then(h=>{if(h){progessiveLoaded.add(b.target);return}preload([f],"src",f,!0).then(c=>c&&progessiveLoaded.add(b.target))})}},{rootMargin:"0px",threshold:.5}),DOMObserver=new MutationObserver(d=>{for(const b of d){for(const a of b.addedNodes)a instanceof HTMLPictureElement&&observer.observe(a);for(const a of b.removedNodes)a instanceof HTMLPictureElement&&(observer.unobserve(a),progessiveLoaded.delete(a))}}).observe(document.body,{childList:!0,subtree:!0}),pictures=document.querySelectorAll("picture");for(const d of pictures)observer.observe(d);async function preload(d,b,a,f){var h;for(const c of d){const g=new Image();a.currentSrc||await{then:e=>a.onload=()=>e(a)};const i=a.currentSrc.split("/").slice(-1)[0],j=(h=c.getAttribute(b))==null?void 0:h.split("/").slice(-1)[0];if(c.dataset.src&&i===j)return c.dataset.src.includes(", ")?c.setAttribute(b,c.dataset.src):(g.src=c.dataset.src,await{then:e=>g.onload=()=>e(g)},c.setAttribute(b,g.src)),a.classList.add("img-progressive"),a.removeAttribute("data-src"),d.forEach(e=>{e.setAttribute(b,e.dataset.src),e.removeAttribute("data-src")}),f&&c.dataset.alt&&(c.setAttribute("alt",c.dataset.alt),c.removeAttribute("data-alt")),!0}}
